""" 브루트포스 / 누적합? /  """


import sys
sys.stdin = open('input.txt')


def search(y, x):
    global answer 

    for v in TETROMINO.values():
        tmp = 0
        for a in range(4):
            r = y + v[0][a]
            c = x + v[1][a]

            if 0 <= r < N and 0 <= c < M:
                tmp += board[r][c]
            else:
                break
        else:
            if answer < tmp:
                answer = tmp


# 1 - 정사각형 (회전 x, 대칭 x) 2 - 직사각형 (회전 - 2, 대칭 x) 3 - ㄹ (회전 - 2, 대칭 - 2) 4 - ㅜ (회전 - 4) 5 - ㄴ (회전 4, 대칭 4)
TETROMINO = {
    1: ((0, 0, 1, 1), (0, 1, 0, 1)),    # 정사각형
    2: ((0, 0, 0, 0), (0, 1, 2, 3)),    # 직사각형 가로
    3: ((0, 1, 2, 3), (0, 0, 0, 0)),    # 직사각형 세로
    4: ((0, 1, 1, 2), (0, 0, 1, 1)),    # ㄹ
    5: ((0, 1, 1, 2), (0, 0, -1, -1)),
    6: ((0, 0, -1, -1), (0, 1, 1, 2)),
    7: ((0, 0, 1, 1), (0, 1, 1, 2)),
    8: ((0, 0, 0, 1), (0, 1, 2, 1)),    # ㅜ
    9: ((0, 1, 2, 1), (0, 0, 0, -1)),
    10: ((0, 0, 0, -1), (0, 1, 2, 1)),
    11: ((0, 1, 2, 1), (0, 0, 0, 1)),
    12: ((0, 1, 2, 2), (0, 0, 0, 1)),   # ㄴ
    13: ((0, 0, 0, 1), (0, 1, 2, 0)),
    14: ((0, 0, 1, 2), (0, 1, 1, 1)),
    15: ((0, 0, 0, -1), (0, 1, 2, 2)),
    16: ((0, 1, 2, 2), (0, 0, 0, -1)),
    17: ((0, 0, 0, 1), (0, 1, 2, 2)),
    18: ((0, 1, 2, 0), (0, 0, 0, 1)),
    19: ((0, 1, 1, 1), (0, 0, 1, 2)),
}


N, M = map(int, sys.stdin.readline().split())
board = [list(map(int, sys.stdin.readline().split())) for _ in range(N)]
answer = 0

for i in range(N):
    for j in range(M):
        search(i, j)

print(answer)